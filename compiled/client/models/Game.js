// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function() {
      return this.reset();
    };

    Game.prototype.reset = function() {
      this.deck = new Deck();
      this.set('playerHand', this.deck.dealPlayer());
      this.set('dealerHand', this.deck.dealDealer());
      (this.get('playerHand')).on({
        'bust': (function(_this) {
          return function() {
            alert("YOU LOSE!!12!!");
            return _this.trigger('reset');
          };
        })(this)
      });
      (this.get('playerHand')).on({
        'stand': (function(_this) {
          return function() {
            return (_this.get('dealerHand')).play(Math.max.apply(null, _this.get('playerHand').scores()));
          };
        })(this)
      });
      (this.get('dealerHand')).on({
        'bust': (function(_this) {
          return function() {
            alert("YOU WIN!!12!!");
            return _this.trigger('reset');
          };
        })(this)
      });
      (this.get('dealerHand')).on({
        'dealerScore': (function(_this) {
          return function(dealerScore) {
            if (dealerScore < Math.max.apply(null, _this.get('playerHand').scores())) {
              alert("YOU WIN!!12!!");
            } else {
              alert("YOU LOSE!!12!!");
            }
            return _this.trigger('reset');
          };
        })(this)
      });
      return this;
    };

    Game.prototype.dealerAction = function() {};

    return Game;

  })(Backbone.Model);

}).call(this);
